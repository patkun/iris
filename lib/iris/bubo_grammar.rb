# Autogenerated from a Treetop grammar. Edits may be lost.


module BuboGrammar
  include Treetop::Runtime

  def root
    @root ||= :document
  end

  def _nt_document
    start_index = index
    if node_cache[:document].has_key?(index)
      cached = node_cache[:document][index]
      if cached
        node_cache[:document][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_token
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Document,input, i0...index, s0)
    end

    node_cache[:document][start_index] = r0

    r0
  end

  def _nt_token
    start_index = index
    if node_cache[:token].has_key?(index)
      cached = node_cache[:token][index]
      if cached
        node_cache[:token][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_environment
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_command
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_simplecommand
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          r4 = _nt_text
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:token][start_index] = r0

    r0
  end

  module Command0
    def operation
      elements[3]
    end

    def options
      elements[4]
    end

    def parameters
      elements[5]
    end
  end

  def _nt_command
    start_index = index
    if node_cache[:command].has_key?(index)
      cached = node_cache[:command][index]
      if cached
        node_cache[:command][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('\\', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\\')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if (match_len = has_terminal?("begin", false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure("begin")
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        i4 = index
        if (match_len = has_terminal?("end", false, index))
          r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure("end")
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r6 = _nt_operation
          s0 << r6
          if r6
            r7 = _nt_options
            s0 << r7
            if r7
              r8 = _nt_parameters
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Command,input, i0...index, s0)
      r0.extend(Command0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:command][start_index] = r0

    r0
  end

  module Simplecommand0
    def operation
      elements[3]
    end

    def options
      elements[4]
    end

  end

  def _nt_simplecommand
    start_index = index
    if node_cache[:simplecommand].has_key?(index)
      cached = node_cache[:simplecommand][index]
      if cached
        node_cache[:simplecommand][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('\\', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\\')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if (match_len = has_terminal?("begin", false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure("begin")
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        i4 = index
        if (match_len = has_terminal?("end", false, index))
          r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure("end")
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r6 = _nt_operation
          s0 << r6
          if r6
            r7 = _nt_options
            s0 << r7
            if r7
              if (match_len = has_terminal?('{}', false, index))
                r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('{}')
                r9 = nil
              end
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Simplecommand,input, i0...index, s0)
      r0.extend(Simplecommand0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:simplecommand][start_index] = r0

    r0
  end

  module Options0
    def plain_text
      elements[1]
    end

  end

  def _nt_options
    start_index = index
    if node_cache[:options].has_key?(index)
      cached = node_cache[:options][index]
      if cached
        node_cache[:options][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i2, s2 = index, []
    if (match_len = has_terminal?('[', false, index))
      r3 = true
      @index += match_len
    else
      terminal_parse_failure('[')
      r3 = nil
    end
    s2 << r3
    if r3
      r4 = _nt_plain_text
      s2 << r4
      if r4
        if (match_len = has_terminal?(']', false, index))
          r5 = true
          @index += match_len
        else
          terminal_parse_failure(']')
          r5 = nil
        end
        s2 << r5
      end
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(Options0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('[]', false, index))
        r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('[]')
        r7 = nil
      end
      if r7
        r6 = r7
      else
        r6 = instantiate_node(SyntaxNode,input, index...index)
      end
      if r6
        r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
        r0 = r6
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:options][start_index] = r0

    r0
  end

  module Environment0
    def lbr1
      elements[1]
    end

    def rbr1
      elements[3]
    end

    def environmentcontent
      elements[4]
    end

    def lbr2
      elements[6]
    end

    def envoperation
      elements[7]
    end

    def rbr2
      elements[8]
    end
  end

  def _nt_environment
    start_index = index
    if node_cache[:environment].has_key?(index)
      cached = node_cache[:environment][index]
      if cached
        node_cache[:environment][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('\\begin', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\\begin')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_lbr
      s0 << r2
      if r2
        r3 = _nt_envoperation
        s0 << r3
        if r3
          r4 = _nt_rbr
          s0 << r4
          if r4
            r5 = _nt_environmentcontent
            s0 << r5
            if r5
              if (match_len = has_terminal?('\\end', false, index))
                r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\\end')
                r6 = nil
              end
              s0 << r6
              if r6
                r7 = _nt_lbr
                s0 << r7
                if r7
                  r8 = _nt_envoperation
                  s0 << r8
                  if r8
                    r9 = _nt_rbr
                    s0 << r9
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Environment,input, i0...index, s0)
      r0.extend(Environment0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:environment][start_index] = r0

    r0
  end

  def _nt_environmentcontent
    start_index = index
    if node_cache[:environmentcontent].has_key?(index)
      cached = node_cache[:environmentcontent][index]
      if cached
        node_cache[:environmentcontent][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_token
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Environmentcontent,input, i0...index, s0)
    end

    node_cache[:environmentcontent][start_index] = r0

    r0
  end

  def _nt_envoperation
    start_index = index
    if node_cache[:envoperation].has_key?(index)
      cached = node_cache[:envoperation][index]
      if cached
        node_cache[:envoperation][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_plain_text
    r0.extend(Envoperation)

    node_cache[:envoperation][start_index] = r0

    r0
  end

  def _nt_operation
    start_index = index
    if node_cache[:operation].has_key?(index)
      cached = node_cache[:operation][index]
      if cached
        node_cache[:operation][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_plain_text
    r0.extend(Operation)

    node_cache[:operation][start_index] = r0

    r0
  end

  def _nt_parameters
    start_index = index
    if node_cache[:parameters].has_key?(index)
      cached = node_cache[:parameters][index]
      if cached
        node_cache[:parameters][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_parameter
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Parameters,input, i0...index, s0)
    end

    node_cache[:parameters][start_index] = r0

    r0
  end

  module Parameter0
    def lbr
      elements[0]
    end

    def parametercontent
      elements[1]
    end

    def rbr
      elements[2]
    end
  end

  def _nt_parameter
    start_index = index
    if node_cache[:parameter].has_key?(index)
      cached = node_cache[:parameter][index]
      if cached
        node_cache[:parameter][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_lbr
    s0 << r1
    if r1
      r2 = _nt_parametercontent
      s0 << r2
      if r2
        r3 = _nt_rbr
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(Parameter,input, i0...index, s0)
      r0.extend(Parameter0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:parameter][start_index] = r0

    r0
  end

  def _nt_lbr
    start_index = index
    if node_cache[:lbr].has_key?(index)
      cached = node_cache[:lbr][index]
      if cached
        node_cache[:lbr][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?('{', false, index))
      r0 = instantiate_node(Brace,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('{')
      r0 = nil
    end

    node_cache[:lbr][start_index] = r0

    r0
  end

  def _nt_rbr
    start_index = index
    if node_cache[:rbr].has_key?(index)
      cached = node_cache[:rbr][index]
      if cached
        node_cache[:rbr][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?('}', false, index))
      r0 = instantiate_node(Brace,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('}')
      r0 = nil
    end

    node_cache[:rbr][start_index] = r0

    r0
  end

  def _nt_parametercontent
    start_index = index
    if node_cache[:parametercontent].has_key?(index)
      cached = node_cache[:parametercontent][index]
      if cached
        node_cache[:parametercontent][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_token
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Parametercontent,input, i0...index, s0)
    end

    node_cache[:parametercontent][start_index] = r0

    r0
  end

  def _nt_text
    start_index = index
    if node_cache[:text].has_key?(index)
      cached = node_cache[:text][index]
      if cached
        node_cache[:text][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[^\\\\\\{\\}]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[^\\\\\\{\\}]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Text,input, i0...index, s0)
    end

    node_cache[:text][start_index] = r0

    r0
  end

  def _nt_plain_text
    start_index = index
    if node_cache[:plain_text].has_key?(index)
      cached = node_cache[:plain_text][index]
      if cached
        node_cache[:plain_text][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[^\\\\^\\{^\\}^\\[^\\]]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[^\\\\^\\{^\\}^\\[^\\]]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Text,input, i0...index, s0)
    end

    node_cache[:plain_text][start_index] = r0

    r0
  end

  module Comment0
  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        node_cache[:comment][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('%', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('%')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[^\\n]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[^\\n]')
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Comment,input, i0...index, s0)
      r0.extend(Comment0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comment][start_index] = r0

    r0
  end

end

class BuboGrammarParser < Treetop::Runtime::CompiledParser
  include BuboGrammar
end

